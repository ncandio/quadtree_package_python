name: Security Vulnerability Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Build package
      run: |
        python -m build
    
    - name: Run Trivy vulnerability scanner on filesystem
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
    
    - name: Run Trivy vulnerability scanner on Python dependencies
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        scanners: 'vuln'
        format: 'table'
        exit-code: '0'  # Don't fail on dependency vulnerabilities, just report
    
    - name: Generate Trivy report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-report.json'
    
    - name: Upload vulnerability report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-vulnerability-report
        path: trivy-report.json
        retention-days: 30

  container-scan:
    name: Container Image Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'  # Skip for scheduled runs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image for scanning
      run: |
        cat > Dockerfile.scan <<EOF
        FROM python:3.11-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \\
            build-essential \\
            g++ \\
            && rm -rf /var/lib/apt/lists/*
        
        # Copy source code
        COPY . /app
        WORKDIR /app
        
        # Install Python dependencies
        RUN pip install --no-cache-dir build setuptools wheel
        
        # Build the package
        RUN python -m build
        
        CMD ["python", "-c", "import quadtree; print('Package built successfully')"]
        EOF
        docker build -f Dockerfile.scan -t quadtree-test:latest .
    
    - name: Run Trivy vulnerability scanner on container
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'quadtree-test:latest'
        format: 'sarif'
        output: 'trivy-container-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
    
    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-container-results.sarif'

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for secret scanning
    
    - name: Run Trivy secret scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        scanners: 'secret'
        format: 'sarif'
        output: 'trivy-secret-results.sarif'
        exit-code: '1'
    
    - name: Upload secret scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-secret-results.sarif'

  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md
    
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          licenses.json
          licenses.md
        retention-days: 30